{"version":3,"sources":["webpack:///./src/raster/box/container.js","webpack:///./src/raster/box/index.js","webpack:///./src/pages/Box.mdx"],"names":["GridContainer","styled","props","media","FlexContainer","ref","Box","className","cols","alignX","alignY","children","left","right","top","bottom","style","styleInner","styleOuter","hasChildBoxes","refCallback","useContext","cssMode","breakpoints","gutterX","gutterY","alignXContext","alignYContext","colspan","parent","controlIsVisible","controlColor","register","useState","hasChildBoxesRegistered","setHasChildBoxes","hasChildBoxesNormalized","useMemo","getReset","alignXNormalized","getAlign","normalizeProps","prop","defaultProp","alignYNormalized","leftNormalized","rightNormalized","topNormalized","bottomNormalized","colsNormalized","colsPercent","getColsPercent","leftPercent","getMarginsPercent","margin","rightPercent","topPercent","bottomPercent","styleOuterNormalized","styleInnerNormalized","styleNormalized","mergeStyles","classNames","colsNumber","value","PropTypes","node","undefined","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","of","isMDXComponent"],"mappings":"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","file":"component---src-pages-box-mdx-5964c222f090208d6fbf.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport Container from '../utils/container'\n\nconst GridContainer = styled(Container)`\n  box-sizing: border-box;\n  display: ${props => props.hasChildBoxes ? 'grid' : 'flex'};\n\n  ${props => props.hasChildBoxes && props.media.map((media, index) => {\n    return media`\n      grid-template-columns: repeat(${props => props.colspan[index]}, 1fr);\n      grid-auto-columns: ${props => props.colspan[index]}fr;\n      grid-auto-rows: min-content;\n      grid-column-gap: ${props.gutterX[index]};\n      grid-row-gap: ${props.gutterY[index]};\n    `\n  })}\n  ${props => props.media.map((media, index) => {\n    return media`\n      ${!props.colsNumber[index] ? 'display: none;' : ''}\n      grid-column: auto / span ${props.cols[index]};\n      margin-left: ${props.left[index]};\n      margin-right: ${props.right[index]};\n      margin-top: ${props.top[index]};\n      margin-bottom: ${props.bottom[index]};\n      ${props.style[index]}\n\n      align-content: ${props => props.alignY[index]};\n      align-items: ${props => props.alignY[index]};\n      // justify-content: ${props => props.alignX[index]};    \n    `\n  })}\n`\n\nconst FlexContainer = styled(Container)`\n  display: flex;\n  box-sizing: border-box;\n  \n  ${props => props.media.map((media, index) => {\n    return media`\n      width: ${props.cols[index]}%;\n      \n      padding-left: calc(${props.gutterX[index]} / 2);\n      padding-right: calc(${props.gutterX[index]} / 2);\n      padding-top: calc(${props.gutterY[index]} / 2);\n      padding-bottom: calc(${props.gutterY[index]} / 2);\n\n      margin-left: ${props.left[index]};\n      margin-right: ${props.right[index]};\n      margin-top: ${props.top[index]};\n      margin-bottom: ${props.bottom[index]};\n      ${props.style[index]}\n    `\n  })\n}\n`\n\nexport default React.forwardRef((props, ref) => {\n  if (props.cssMode === 'flex') {\n    return <FlexContainer {...props} ref={ref} />\n  }\n  return <GridContainer {...props} ref={ref} />\n})\n","import React, { useContext, useMemo, useState } from 'react'\nimport PropTypes from 'prop-types'\n\nimport classNames from 'classnames'\nimport Context from '../context'\nimport getReset from '../utils/getReset'\nimport normalizeProps from '../utils/normalizeProps'\nimport getAlign from '../utils/getAlign'\nimport getColsPercent from '../utils/getColsPercent'\nimport getMarginsPercent from '../utils/getMarginsPercent'\nimport Inner from '../utils/inner'\nimport Resetter from '../utils/resetter'\nimport mergeStyles from '../utils/mergeStyles'\nimport StyledContainer from './container'\n\nconst Box = React.forwardRef(({\n  className,\n  cols,\n  alignX,\n  alignY,\n  children,\n  left,\n  right,\n  top,\n  bottom,\n  style,\n  styleInner,\n  styleOuter,\n  hasChildBoxes,\n  refCallback\n}, ref) => {\n  const {\n    cssMode,\n    breakpoints,\n    gutterX,\n    gutterY,\n    alignX: alignXContext,\n    alignY: alignYContext,\n    colspan,\n    parent,\n    media,\n    controlIsVisible,\n    controlColor,\n    register\n  } = useContext(Context)\n\n  const [hasChildBoxesRegistered, setHasChildBoxes] = useState(undefined)\n  const hasChildBoxesNormalized = useMemo(() => getReset(hasChildBoxes, hasChildBoxesRegistered), [hasChildBoxes, hasChildBoxesRegistered])\n\n  const alignXNormalized = useMemo(() => getAlign(normalizeProps({ prop: alignX, defaultProp: alignXContext, breakpoints }), cssMode), [alignX, alignXContext, breakpoints, cssMode])\n  const alignYNormalized = useMemo(() => getAlign(normalizeProps({ prop: alignY, defaultProp: alignYContext, breakpoints }), cssMode), [alignY, alignYContext, breakpoints, cssMode])\n\n  const leftNormalized = useMemo(() => normalizeProps({ prop: left, breakpoints }), [left, breakpoints])\n  const rightNormalized = useMemo(() => normalizeProps({ prop: right, breakpoints }), [right, breakpoints])\n  const topNormalized = useMemo(() => normalizeProps({ prop: top, breakpoints }), [top, breakpoints])\n  const bottomNormalized = useMemo(() => normalizeProps({ prop: bottom, breakpoints }), [bottom, breakpoints])\n\n  const colsNormalized = useMemo(() => normalizeProps({ prop: cols, defaultProp: parent, breakpoints }), [cols, parent, breakpoints])\n  const colsPercent = useMemo(() => getColsPercent({ cols: colsNormalized, left: leftNormalized, right: rightNormalized, parent, cssMode }), [colsNormalized, leftNormalized, rightNormalized, parent, cssMode])\n\n  const leftPercent = useMemo(() => getMarginsPercent({ margin: leftNormalized, cols: colsPercent, gutterX, parent, cssMode }), [leftNormalized, colsPercent, gutterX, parent, cssMode])\n  const rightPercent = useMemo(() => getMarginsPercent({ margin: rightNormalized, cols: colsPercent, gutterX, parent, cssMode }), [rightNormalized, colsPercent, gutterX, parent, cssMode])\n  const topPercent = useMemo(() => getMarginsPercent({ margin: topNormalized, cols: colsPercent, gutterX, parent, cssMode }), [topNormalized, colsPercent, gutterX, parent, cssMode])\n  const bottomPercent = useMemo(() => getMarginsPercent({ margin: bottomNormalized, cols: colsPercent, gutterX, parent, cssMode }), [bottomNormalized, colsPercent, gutterX, parent, cssMode])\n\n  const styleOuterNormalized = useMemo(() => normalizeProps({ prop: styleOuter, breakpoints }), [styleOuter, breakpoints])\n  const styleInnerNormalized = useMemo(() => normalizeProps({ prop: styleInner, breakpoints }), [styleInner, breakpoints])\n  const styleNormalized = useMemo(() => mergeStyles(normalizeProps({ prop: style, breakpoints }), styleInnerNormalized, styleOuterNormalized), [style, breakpoints, styleInnerNormalized, styleOuterNormalized])\n  if (register) register()\n\n  return (\n    <StyledContainer\n      cssMode={cssMode}\n      breakpoints={breakpoints}\n      className={classNames(['Box', className])}\n      cols={colsPercent}\n      colsNumber={colsNormalized}\n      media={media}\n      gutterX={gutterX}\n      gutterY={gutterY}\n      colspan={colsNormalized}\n      hasChildBoxes={hasChildBoxesNormalized}\n      alignX={alignXNormalized}\n      alignY={alignYNormalized}\n\n      left={leftPercent}\n      right={rightPercent}\n      top={topPercent}\n      bottom={bottomPercent}\n      style={cssMode === 'grid'\n        ? styleNormalized\n        : styleOuterNormalized\n      }\n      ref={ref}\n    >\n      <Inner\n        cssMode={cssMode}\n        className='Box__Inner'\n        gutterX={gutterX}\n        gutterY={gutterY}\n        media={media}\n        alignX={alignXNormalized}\n        alignY={alignYNormalized}\n        style={styleInnerNormalized}\n        breakpoints={breakpoints}\n        controlIsVisible={controlIsVisible}\n        controlColor={controlColor}\n      >\n        <Resetter\n          cssMode={cssMode}\n          className='Box__Resetter'\n          hasChildBoxes={hasChildBoxesNormalized}\n          media={media}\n          gutterX={gutterX}\n          gutterY={gutterY}\n          alignX={alignXNormalized}\n          alignY={alignYNormalized}\n          breakpoints={breakpoints}\n        >\n          <Context.Provider\n            value={{\n              breakpoints,\n              gutterX,\n              gutterY,\n              alignX: alignXNormalized,\n              alignY: alignYNormalized,\n              colspan,\n              media,\n              parent: colsNormalized,\n              controlIsVisible,\n              cssMode,\n              register: () => {\n                if (!hasChildBoxesRegistered) {\n                  setHasChildBoxes(true)\n                }\n              }\n            }}\n          >\n            {children}\n          </Context.Provider>\n        </Resetter>\n      </Inner>\n    </StyledContainer>\n  )\n})\n\nBox.displayName = 'Box'\n\nBox.propTypes = {\n  /**  Width of the Box. Falls back to width of parent Box or Grid. Unit: Grid columns defined with the prop \"colspan\" */\n  cols: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),\n  /**  Left margin of the Box. Unit: Grid-columns. */\n  left: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),\n  /**  Right margin of the Box. Unit: Grid-columns. */\n  right: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),\n  /**  Top margin of the Box. Unit: Grid-columns. */\n  top: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),\n  /**  Bottom margin of the Box. Unit: Grid-columns. */\n  bottom: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),\n  /**  cssMode={flex} only! Horizontal Align of child elements. */\n  alignX: PropTypes.oneOfType([PropTypes.array, PropTypes.string]),\n  /**  Vertical Align of child elements. */\n  alignY: PropTypes.oneOfType([PropTypes.array, PropTypes.string]),\n  /**  cssMode={grid} only! Custom styles with styled-components. */\n  style: PropTypes.oneOfType([PropTypes.array, PropTypes.string]),\n  /**  cssMode={flex} only! Styles Box-Inner-Container with styled-components. */\n  styleInner: PropTypes.oneOfType([PropTypes.array, PropTypes.string]),\n  /**  cssMode={flex} only! Styles Box-Outer-Container with styled-components. */\n  styleOuter: PropTypes.oneOfType([PropTypes.array, PropTypes.string]),\n  /**  Tell react-raster that you have child-Boxes inside this Grid- or Box-Component. See the topic \"Resetting Boxes\" */\n  hasChildBoxes: PropTypes.bool,\n  className: PropTypes.string,\n  children: PropTypes.node\n}\n\nBox.defaultProps = {\n  className: '',\n  cols: undefined,\n  alignX: '',\n  alignY: '',\n  children: null,\n  left: 0,\n  right: 0,\n  top: 0,\n  bottom: 0,\n  style: '',\n  styleInner: '',\n  styleOuter: '',\n  hasChildBoxes: undefined\n}\n\nexport default Box\nexport { Box }\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/andreasfaust/components/react-raster/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Props } from \"docz\";\nimport Box from \"../raster/box\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"box\"\n    }}>{`Box`}</h1>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Box} mdxType=\"Props\" />\n    <p>{`Styled Proptable is coming soon!`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}